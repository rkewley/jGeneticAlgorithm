package jGeneticAlgorithm;

/**
 * Title:        JGeneticAlgorithm
 * Description:  A Java implementation of genetic algorithms
 * @author Robert Kewley
 * @version 1.0
 */

import java.lang.*;
import cern.jet.random.engine.RandomEngine;
import cern.jet.random.Uniform;

/**
 * A Genome is the parent class of all genomes generated by the genetic
 * algorithm.  A genome contains the encoded information which represents
 * an organism (phenotype) or a solution to an optimization problem.  The
 * oranisms or solutions represented by a genome compete with one another,
 * and those most fit are most likely to produce offspring and survive to
 * the next generation.
 */

public abstract class Genome implements Cloneable, Comparable {

  /**
   * A random number generator from the cern.jet.random.engine library.
   * Required for the genome to perform random genetic operations.
   */
  protected RandomEngine randomGenerator;

  /**
   * A uniform distribution object from the cern.jet.random library
   */
  protected Uniform uniform;

  /**
   * The evaluated fitness of the genome.
   */
  protected double rawFitness = 0;

  /**
   * Indicates whether the genome has been evaluated and fitness set.
   */
  protected boolean isEvaluated = false;

  /**
   * Genome fitness after scaling with other members of the population.
   */
  protected double scaledFitness = 0;

  /**
   * Temporary fitness value for the genome.
   */
  protected double tempFitness = 0;

  /**
   * The fitness rank of the genome.
   */
  protected int rank = 0;

  /**
   * Set to 1 if this genome seeks to minimize its fitness.  Default it maximize.
   */
  public boolean minimize = false;

  /**
   * The genetic algorithm object for this genome.
   */
  public GA ga = null;

  /**
   * The mutation rate for the genome.
   */
  protected double mutationRate;

  /**
   * The number of children to produce when performing crossover.
   * The defaule value is 2;
   */
  protected int numChildren = 2;

  /**
   * Constructor
   * @param engine A random number generator from the cern.jet.random.engine
   * library.
   */
  public Genome(RandomEngine engine) {
    super();
    randomGenerator = engine;
    uniform = new Uniform(engine);
  }

  /**
   * Sets the evaluated condition of the genome.
   * @param b A boolean variable indicating whether or not the genome has
   * been evaluated.  If b = 0, this algorithm also sets the fitness values
   * and rank to 0, their default values.
   */
  public void setIsEvaluated(boolean b) {
    isEvaluated = b;

    if (b == false) {  // if genome is not evaluated, set fitness values to defaults
      rawFitness = 0;
      tempFitness = 0;
      scaledFitness = 0;
      rank = 0;
    }
  }

  /**
   * This method compares this genome to another genome passed in as an
   * Object.  If the Genome passed in is more fit, it returns a 1.  Otherwise
   * it returns a -1.
   */
  public int compareTo(Object o) {
    int r;    // The return value
    Genome g; // The genome being compaered to this genome

    r = 0;
    g = (Genome)o;
    if (minimize) {  // if minimizing
      if (rawFitness < g.rawFitness) {
        r = -1;
      }
      else if (rawFitness > g.rawFitness) {
        r = 1;
      }
    }
    else {  // maximizing
      if (rawFitness > g.rawFitness) {
        r = -1;
      }
      else if (rawFitness < g.rawFitness) {
        r = 1;
      }
    }
    return r;
  }

  /**
   * Returns a boolean value indicating whether or not the genome has been
   * been evaluated.
   */
  public boolean getIsEvaluated() {
    return isEvaluated;
  }

  /**
   * Subordinate classes must declare a method to initialize the Genome.
   */
  public abstract void initialize();

  /**
   * Subordinate classes must declare a method to mutate the genome.
   */
  public abstract void mutate ();

  /**
   * Subordinate classes must declare a method which creates a deep copy
   * of the Genome.
   */
  public abstract Genome copy() throws CloneNotSupportedException;

  /**
   * Subordinate classes must declare a method to perform crossover.
   */
  public abstract Genome[] crossWith (Genome dad);

  /**
   * Sets the rank of a genome.
   * @param r The positive integer rank of the genome with 1 being most fit.
   */
  public void setRank(int r) throws GAException {
    if (r <= 0) {
      throw new GAException(
          "The rank of a genome must be a positive integer");
    }
    rank = r;
  }

  /**
   * Returns the fitness rank of the genome with 1 being the most fit.
   */
  public int getRank() {
    return rank;
  }

  /**
   * Sets the number of children to produce when performing crossover.
   * @param n The number of children to produce
   */
  public void setNumChildren(int n) throws GAException {
    if (n <= 0) {
      throw new GAException(
          "The number of children must be a positive integer");
    }
    numChildren = n;
  }

  /**
   * Returns the the number of children to produce when performing crossover.
   */
  public int getNumChildren() {
    return numChildren;
  }

  /**
   * Sets the mutation rate for the genome.
   * @param r The mutation rate must be between 0 and 1.
   */
  public void setMutationRate(double r) throws GAException {
    if (r < 0 || r > 1) {
      throw new GAException(
          "The mutation rate for a genome must be between 0 and 1.");
    }
    mutationRate = r;
  }

  /**
   * Returns the mutation rate of the genome.
   */
  public double getMutationRate() {
    return mutationRate;
  }

  /**
   * Returns a string description of this object's parameters
   */
  public String describeParameters() {
    String description;

    description = "Fitness:  raw  scaled  temp  rank\n" + rawFitness
                + "  " + Double.toString(scaledFitness) + "  " +
                  Double.toString(tempFitness) + "  " + rank + "\n";

    description += "isEvaluated: " + isEvaluated + "\n";
    description += "minimize: " + minimize + "\n";
    description += "mutationRate: " + mutationRate + "\n";
    description += "numChildren: " + numChildren + "\n";

    return description;

  }

  /**
   * Sets the raw fitness value for this genome.  Also sets the isEvaluated
   * property to true.
   */
  public void setRawFitness(double f) {
    rawFitness = f;
    isEvaluated = true;
  }

  /**
   * Returns the raw fitness value for this genome
   */
  public double getRawFitness() {
    return rawFitness;
  }

  /**
   * Sets the scaled fitness value for this genome.
   */
  public void setScaledFitness(double f) {
    scaledFitness = f;
  }

  /**
   * Returns the scaled fitness value for this genome
   */
  public double getScaledFitness() {
    return scaledFitness;
  }

  /**
   * Sets the temporary fitness value for this genome.
   */
  public void setTempFitness(double f) {
    tempFitness = f;
  }

  /**
   * Returns the temporary fitness value for this genome.
   */
  public double getTempFitness() {
    return tempFitness;
  }

  /**
   * Returns debugging information about this object
   */
  public String debug() {
    return super.toString() + "\n" + this.describeParameters();
  }

}